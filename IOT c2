//************************************************************
// this is a simple example that uses the painlessMesh library
//
// This example shows how to build a mesh with named nodes
//
//************************************************************
#include "namedMesh.h"

#define MESH_SSID "whateverYouLike"
#define MESH_PASSWORD "somethingSneaky"
#define MESH_PORT 5555
String status = "ON";

Scheduler userScheduler;  // to control your personal task
namedMesh mesh;

String nodeName = "C-3";  // Name needs to be unique


Task taskSendMessage(TASK_SECOND * 2, TASK_FOREVER, []() {
  String msg = String("This is a message from c3") ;
  String to = "C-1";
  mesh.sendSingle(to, msg);
});  // start with a one second interval

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  // Serial.begin(115200);
  

  mesh.setDebugMsgTypes(ERROR | DEBUG | CONNECTION);  // set before init() so that you can see startup messages

  mesh.init(MESH_SSID, MESH_PASSWORD, &userScheduler, MESH_PORT);

  mesh.setName(nodeName);  // This needs to be an unique name!

  mesh.onReceive([](uint32_t from, String &msg) {
    // Serial.printf(msg.c_str());
    
    if(msg == status){
      digitalWrite(LED_BUILTIN, HIGH);
      delay(2000);
    }
    else{
      digitalWrite(LED_BUILTIN, LOW);
    }
  });
  
  // mesh.onReceive([](String &from, String &msg) {
  //   Serial.printf("Received message by name from: %s, %s\n", from.c_str(), msg.c_str());
  // });

  mesh.onChangedConnections([]() {
    // Serial.printf("Changed connection\n");
    // digitalWrite(LED_BUILTIN, HIGH);
    // delay(1000);
    // digitalWrite(LED_BUILTIN, LOW);
  });

}

void loop() {
  // it will run the user scheduler as well
  mesh.update();
  digitalWrite(LED_BUILTIN, LOW);
}
