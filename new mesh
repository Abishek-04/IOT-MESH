#include "namedMesh.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266WiFi.h>
#include <PainlessMesh.h>
#include <ESP8266WebServer.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET     -1 // Reset pin
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define MESH_SSID "whateverYouLike"
#define MESH_PASSWORD "somethingSneaky"
#define MESH_PORT 5555
#define HTTP_PORT 80

ESP8266WebServer httpServer(HTTP_PORT);

// Define the mesh object
PainlessMesh mesh;

String nodeName = "C-1";  // Name needs to be unique

void initOLED() {
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
}

void showOLEDMessage(String message) {
  display.clearDisplay();
  display.setTextColor(BLACK, WHITE);
  display.setCursor(0, 28);
  display.println(message);
  display.display();
}

// Define the function for handling HTTP requests
void handleRequest() {
  String message = "Hello, world!"; // The message to be sent as response
  showOLEDMessage(message);
  httpServer.send(200, "text/plain", message);
}

void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  Serial.begin(115200);
  initOLED();
  
  // Initialize the WiFi connection
  WiFi.mode(WIFI_STA);
  WiFi.begin("your_wifi_ssid", "your_wifi_password");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("WiFi connected!");
  
  // Initialize the mesh
  mesh.setDebugMsgTypes(ERROR | STARTUP);
  mesh.init(MESH_SSID, MESH_PASSWORD, MESH_PORT);
  
  mesh.setName(nodeName);
  mesh.onReceive([](String &from, String &msg) {
    showOLEDMessage(msg);
  });

  // Register the HTTP request handler
  httpServer.on("/", handleRequest);
  httpServer.begin();
}

void loop() {
  mesh.update();
  httpServer.handleClient();
}
